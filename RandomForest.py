# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GPMYLzX6FGxFa2SjSK1cnM55t1ZOVeuk
"""

import pandas as pd
import seaborn as sns
from collections import Counter
import numpy as np
import matplotlib.pyplot as plt

def scaled_entropy(y):
    counts = np.bincount(y)
    probs = counts / len(y)
    return -np.sum([p * np.log2(p) for p in probs if p > 0])

class Node: 
    def __init__(self, feature = None, threshold = None, left = None, right = None,value = None):
        self.feature = feature
        self.threshold = threshold
        self.left = left
        self.right = right
        self.value = value    
    
    
    def leaf_node(self):
        return self.value is not None
    
class DecisionTree:
    def __init__(self, min_samples_split=2, max_depth= 10, n_feats=25):
        self.min_samples_split= min_samples_split
        self.max_depth= max_depth
        self.n_feats= n_feats
        self.root= None
        
   
    def split(self, X_column, threshold):
        left_idxs = np.argwhere(X_column <= threshold).flatten()
        right_idxs = np.argwhere(X_column > threshold).flatten()
        return left_idxs, right_idxs
    
        
    def build_tree(self, X, y , depth = 0):
        n_samples = X.shape[0]
        n_features = X.shape[1]
        n_labels = len(np.unique(y))
        #stopping criteria
        if (n_labels ==1
            or depth >= self.max_depth
            or n_samples < self.min_samples_split):
            leaf_value = self.most_frequent_label(y)
            return Node(value= leaf_value)  
        
        feat_idxs = np.random.choice(n_features, self.n_feats, replace= False) #it selectes indexes from the n of features randomly without replacement since we don't want same index many times and the array has lenght= self.n_feats
        #greedy search
        best_feat, best_threshold = self.Best_criteria(X, y, feat_idxs)
        left_idxs, right_idxs = self.split(X[:, best_feat], best_threshold)
        left = self.build_tree(X[left_idxs, :], y[left_idxs], depth = depth+1) #iterate and grow the tree at the left of the node
        right = self.build_tree(X[right_idxs, :], y[right_idxs], depth = depth+1) #iterate and grow the tree at the right of the node
        return Node(best_feat, best_threshold, left, right)
    
                                            
    
    def Information_Gain(self, y, X_column, threshold):
        e_parent = scaled_entropy(y)
        #generate split
        left_idxs = np.argwhere(X_column <= threshold).flatten()
        right_idxs = np.argwhere(X_column > threshold).flatten()
        if len(left_idxs) == 0 or len(right_idxs) == 0:
            return 0 #as information gain
        n_left, n_right = len(left_idxs), len(right_idxs)
        e_left, e_right = scaled_entropy(y[left_idxs]), scaled_entropy(y[right_idxs])
        #weighted avg of children' entropy
        e_children = (n_left/len(y))*e_left + (n_right/len(y))*e_right                                          
        #return information gain
        Information_Gain = e_parent- e_children
        return Information_Gain 
    
    
    def Best_criteria(self, X, y, feat_idxs):
        best_gain = 0
        split_idx, split_threshold = None, None
        for f in feat_idxs:
            X_column= X[:, f]
            thresholds = np.unique(X_column)
            for t in thresholds:
                infogain = self.Information_Gain(y, X_column, t)
                if infogain > best_gain:
                    best_gain= infogain
                    split_idx = f
                    split_threshold = t
        return split_idx, split_threshold
    
    
    def most_frequent_label(self,y):
        most_frequent = Counter(y).most_common(1)[0][0] #since most_common is a list of tuples look for the first element of the first tuple
        return most_frequent



    def fit(self,X,y):
        #grow tree
        self.n_feats= X.shape[1] if not self.n_feats else min(self.n_feats, X.shape[1]) #if not specified n of features for the split take the n of rows in X, otherwise the mmin among the nfeats specified above and the n of rows of X
        self.root = self.build_tree(X,y)
        
    
    
    #predict tree
    def along_tree(self, x, node):
        if node.leaf_node():
            return node.value
        if x[node.feature] <= node.threshold:
            return self.along_tree(x,node.left)
        return self.along_tree(x, node.right)
         
    
    def predict(self, X):
        return np.array([self.along_tree(x, self.root) for x in X])

def bootstrap_sample(X,y):
    n_sample = X.shape[0]
    idxs = np.random.choice(n_sample, size = 6000, replace = True)
    return X[idxs], y[idxs]
    
def most_frequent_label(y):
    most_frequent = Counter(y).most_common(1)[0][0] #since most_common is a list of tuples we look for the first element of the first tuple
    return most_frequent

class RandomForest:
    
    def __init__(self, n_trees= 10, min_samples_split= 2, max_depth = 10, n_feats = 25):
        self.n_trees = n_trees
        self.min_samples_split = min_samples_split
        self.max_depth = max_depth
        self.n_feats = n_feats
        self.trees = []
        

    
    
    def fit(self, X, y):
        self.trees = []
        for _ in range(self.n_trees):
            tree = DecisionTree(min_samples_split = self.min_samples_split, max_depth= self.max_depth, n_feats= self.n_feats)
            X_sample, y_sample = bootstrap_sample(X, y)    
            tree.fit(X_sample, y_sample)
            self.trees.append(tree)
        
        
    
    def predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees])
        tree_preds = np.swapaxes(tree_preds, 0, 1)
        y_pred = [most_frequent_label(tree_pred) for tree_pred in tree_preds]
        return np.array(y_pred)

def accuracy(real, predicted):
	correct = 0
	for i in range(len(real)):
		if real[i] == predicted[i]:
			correct += 1
	return correct / float(len(real)) * 100.0


def error(real, predicted):
    return 100 - accuracy(real, predicted)

'''Implementation on the dataset'''

df_train = pd.read_csv('drive/My Drive/fashion_mnist_data/fashion-mnist_train.csv')     
df_test = pd.read_csv('drive/My Drive/fashion_mnist_data/fashion-mnist_test.csv')

#visualize images
Xtrain = df_train.drop('label', 1)
plt.figure(figsize=(6,6))
for digit_num in range(0,64):
    plt.subplot(8,8,digit_num+1)
    grid_data = Xtrain.iloc[digit_num].values.reshape(28,28)
    plt.imshow(grid_data, interpolation = "none", cmap = "bone_r")
    plt.xticks([])
    plt.yticks([])

Xtest = df_test.drop('label', 1)
plt.figure(figsize=(6,6))
for digit_num in range(0,64):
    plt.subplot(8,8,digit_num+1)
    grid_data = Xtest.iloc[digit_num].values.reshape(28,28)
    plt.imshow(grid_data, interpolation = "none", cmap = "bone_r")
    plt.xticks([])
    plt.yticks([])

#check whether there are null values in the df
df_train.isnull()
df_train.isnull().sum().sum()
#check if classes are balanced
sns.countplot(x="label", data=df_train)

train_X = df_train.drop("label",1).values 
train_y = df_train['label'].values

#learning the tree
tree = DecisionTree()
tree.fit(train_X, train_y)

#computing the training error
trainpred = tree.predict(train_X)
error(train_y, trainpred)

#Predictions on the test set
df_test.isnull()
df_test.isnull().sum().sum()
#check if classes are balanced
sns.countplot(x="label", data=df_test)

test_X = df_test.drop("label",1).values
test_y = df_test['label'].values

results = tree.predict(test_X)
print(results)

accuracy(test_y, results)

error(test_y, results)

#RandomForest
#6000 obs in the bootstrapped subsample
rf10 = RandomForest(n_trees = 10)
rf10.fit(train_X,train_y)
rfpred10 = rf10.predict(test_X)
accuracy10 = accuracy(test_y, rfpred10)

rf50 = RandomForest(n_trees = 50)
rf50.fit(train_X,train_y)
rfpred50 = rf50.predict(test_X)
accuracy50 = accuracy(test_y, rfpred50)

rf100 = RandomForest(n_trees = 100)
rf100.fit(train_X,train_y)
rfpred100 = rf100.predict(test_X)
accuracy100 = accuracy(test_y, rfpred100)

rf150 = RandomForest(n_trees = 150)
rf150.fit(train_X,train_y)
rfpred150 = rf150.predict(test_X)
accuracy150 = accuracy(test_y, rfpred150)

rf200 = RandomForest(n_trees = 200)
rf200.fit(train_X,train_y)
rfpred200 = rf200.predict(test_X)
accuracy200 = accuracy(test_y, rfpred200)

#for subsample of 6000 obs
n_estimators = [10, 50, 100, 150, 200]
accuracylevel = [accuracy10, accuracy50, accuracy100, accuracy150 , accuracy200]


plt.plot(n_estimators, accuracylevel)
plt.xlabel('Number of trees', fontsize=14, color='blue')
plt.ylabel('Accuracy',fontsize=14,color='blue')

#changing the bootstrap default value to 1200
newrf10 = RandomForest(n_trees = 10)
newrf10.fit(train_X,train_y)
newrfpred10 = newrf10.predict(test_X)
newaccuracy10 = accuracy(test_y, newrfpred10)

newrf50 = RandomForest(n_trees = 50)
newrf50.fit(train_X,train_y)
newrfpred50 = newrf50.predict(test_X)
newaccuracy50 = accuracy(test_y, newrfpred50)

newrf100 = RandomForest(n_trees = 100)
newrf100.fit(train_X,train_y)
newrfpred100 = newrf100.predict(test_X)
newaccuracy100 = accuracy(test_y, newrfpred100)

newrf150 = RandomForest(n_trees = 150)
newrf150.fit(train_X,train_y)
newrfpred150 = newrf150.predict(test_X)
newaccuracy150 = accuracy(test_y, newrfpred150)

newrf200 = RandomForest(n_trees = 200)
newrf200.fit(train_X,train_y)
newrfpred200 = newrf200.predict(test_X)
newaccuracy200 = accuracy(test_y, newrfpred200)

newrf250 = RandomForest(n_trees = 250)
newrf250.fit(train_X,train_y)
newrfpred250 = newrf250.predict(test_X)
newaccuracy250 = accuracy(test_y, newrfpred250)

newrf300 = RandomForest(n_trees = 300)
newrf300.fit(train_X,train_y)
newrfpred300 = newrf300.predict(test_X)
newaccuracy300 = accuracy(test_y, newrfpred300)

#for subsample of 1200 obs
n_estimators2 = [10, 50, 100, 150, 200, 250, 300]
accuracylevel2 = [newaccuracy10, newaccuracy50, newaccuracy100, newaccuracy150, newaccuracy200, newaccuracy250, newaccuracy300]

plt.plot(n_estimators2, accuracylevel2)
plt.xlabel('Number of trees', fontsize=14, color='blue')
plt.ylabel('Accuracy',fontsize=14,color='blue')